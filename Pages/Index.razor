@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorDragDrop.Data

<h1>Drag and Drop</h1>

@if (stateMessage != null)
{
    foreach (var c in stateMessage.Cards)
    {
        // all of these event handlers are in site.js
        <img id="@(c)" draggable="true" style="width:90px" src="images/img_@(c).png"
             ondragstart="dragstart_handler(event)"
             ondragover="event.preventDefault();"
             ondrop="drop_handler(event)" />
    }
}


@code{
    [Inject] IJSRuntime jsRuntime { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    public HubConnection hubConnection { get; set; }
    public StateMessage stateMessage;

    protected override async Task OnInitializedAsync()
    {
        if (hubConnection == null)
        {
            var uri = NavigationManager.BaseUri + "MyHub";
            hubConnection = new HubConnectionBuilder()
                .WithUrl(uri)
                .Build();

            // when a STATE message is received, update the UI
            hubConnection.On<StateMessage>(MessageType.STATE, (sm) =>
            {
                stateMessage = sm;
                StateHasChanged();
            });

            await hubConnection.StartAsync();
        }
    }

    [JSInvokable]
    public async void CardMoved(string src, string dest)
    {
        // a drag drop operation has taken place - notify the hub to update the app's state
        await hubConnection.InvokeAsync(MessageType.CARD_MOVED, src, dest);
    }

    protected async override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            // initialize the DotNetObjectReference in site.js
            await jsRuntime.InvokeVoidAsync("setDotNetObjRef", DotNetObjectReference.Create(this));
            // tell the hub to initiale the app state
            await hubConnection.InvokeAsync(MessageType.STATE);
        }
    }
}

<p class="mt-4">Drag and drop a card to change its position.</p>
<p>
    This app demonstrates a technique for handling drag/drop in Blazor Server apps. All of the bookkeeping is handled
    by the browser, but the DOM is not updated in Javascript. Only when a card is dropped do we pass that on to
    the C# code to update the app state and re-render the UI.
</p>
<p>
    This app requires the Microsoft.AspNetCore.SignalR.Client NuGet package.
</p>
<p>
    Modified files:
    <ul>
        <li><b>_Host.cshtml</b>: add script tag</li>
        <li><b>Startup.cs</b>: add <code>endpoints.MapHub&lt;MyHub&gt;("MyHub");</code></li>
        <li><b>site.js</b>: event handlers for the drag/drop operation</li>
        <li><b>MyHub.cs</b>: maintains the state of the app</li>
        <li><b>Index.razor</b>: the UI</li>
    </ul>
</p>